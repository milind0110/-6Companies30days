class Solution{
public:
    void printbrackets(int i,int j,vector<vector<int>> &brackets,char &curr,string &ans){
        if(i > j)
            return;
        if(i == j){
            ans += curr;
            curr++;
            return ;
        }
        ans += '(';
        printbrackets(i,brackets[i][j],brackets,curr,ans);
        printbrackets(brackets[i][j]+1,j,brackets,curr,ans);
        ans += ')';
        return ;
    }
    string matrixChainOrder(int p[], int n){
        long long dp[n+1][n+1];
        vector<vector<int>> brackets(n+1,vector<int>(n+1));
        for(int i = 0; i < n; i++){
            dp[i][i] = 0;
        }
        for(int j = 1; j < n; j++){
            for(int i = 1; j+i < n; i++){
                dp[i][i+j] = 1e18;
                for(int k = i; k < i+j; k++){
                    long long ans = dp[i][k]+dp[k+1][i+j]+(long long)p[i-1]*p[k]*p[j+i];
                    if(ans < dp[i][i+j]){
                        dp[i][i+j] = ans;
                        brackets[i][i+j] = k;
                    }
                }
            }
        }
        string ans = "";
        char curr = 'A';
        printbrackets(1,n-1,brackets,curr,ans);
        return ans;
        // code here
    }
};
