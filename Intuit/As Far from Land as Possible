class Solution {
public:
    bool valid(int x,int y,int n,int m){
        if(x < 0 || x >= n)
            return false;
        if(y < 0 || y >= m)
            return false;
        return true;
    }
    int maxDistance(vector<vector<int>>& grid) {
        int mx = -1;
        int n = grid.size();
        int m = grid[0].size();
        queue<pair<int,int>> q;
        vector<vector<int>> d(n,vector<int>(m,0));
        for(int i = 0; i < n; i++){
            for(int j = 0; j < m; j++){
                if(grid[i][j]){
                    q.push({i,j});
                    d[i][j] = 1;
                }
            }
        }
        int dx[] = {-1,1,0,0};
        int dy[] = {0,0,-1,1};
        while(!q.empty()){
            int x = q.front().first;
            int y = q.front().second;
            q.pop();
            for(int i = 0; i < 4; i++){
                int new_x = x + dx[i];
                int new_y = y + dy[i];
                if(valid(new_x,new_y,n,m) && d[new_x][new_y] == 0 && grid[new_x][new_y] == 0){
                    d[new_x][new_y] = d[x][y]+1;
                    q.push({new_x,new_y});
                    mx = max(mx,d[new_x][new_y]-1);
                }
            }
        }
        return mx;
    }
};
