class Solution {
public:
    double maxProbability(int n, vector<vector<int>>& edges, vector<double>& succProb, int start, int end) {
        vector<vector<pair<int,double>>> edge(n);
        for(int i = 0; i < (int)edges.size(); i++){
            edge[edges[i][0]].push_back({edges[i][1],succProb[i]});
            edge[edges[i][1]].push_back({edges[i][0],succProb[i]});
        }
        vector<double> currp(n,0);
        currp[start] = 1;
        priority_queue<pair<double,int>> pq;
        pq.push({currp[start],start});
        while(!pq.empty()){
            pair<double,int> curr = pq.top();
            pq.pop();
            if(curr.second == end)
                return curr.first;
            for(auto [i,w]:edge[curr.second]){
                double prev = currp[i];
                double now = curr.first*(w);
                if(prev < now){
                    currp[i] = now;
                    pq.push({currp[i],i});
                }
            }
        }
        return 0;
    }
};
